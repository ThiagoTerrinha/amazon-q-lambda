const AWS = require('aws-sdk');
const puppeteer = require('puppeteer-core');
const chromium = require('chromium');
const { spawn } = require('child_process');
const { promisify } = require('util');
const fs = require('fs').promises;
const path = require('path');

// Configurar AWS SDK
AWS.config.update({ region: process.env.AWS_REGION || 'us-east-1' });

/**
 * Handler principal da fun√ß√£o Lambda
 */
exports.handler = async (event, context) => {
    console.log('üöÄ Iniciando convers√£o de site para PDF...');
    console.log('Event:', JSON.stringify(event, null, 2));

    try {
        // Extrair URL do evento
        const url = event.url || event.body?.url || event.queryStringParameters?.url;

        if (!url) {
            return createResponse(400, {
                error: 'URL √© obrigat√≥ria',
                message: 'Forne√ßa uma URL v√°lida no par√¢metro "url"'
            });
        }

        // Validar e normalizar URL
        const normalizedUrl = normalizeUrl(url);
        console.log(`üì± URL normalizada: ${normalizedUrl}`);

        // Usar Amazon Q CLI para obter insights
        const qInsights = await consultAmazonQ(normalizedUrl);
        console.log('ü§ñ Insights do Amazon Q:', qInsights);

        // Gerar PDF baseado nos insights do Amazon Q
        const pdfBuffer = await generatePdfWithInsights(normalizedUrl, qInsights);

        // Converter para base64
        const pdfBase64 = pdfBuffer.toString('base64');

        return createResponse(200, {
            success: true,
            url: normalizedUrl,
            pdfBase64,
            qInsights: qInsights.summary,
            fileSize: pdfBuffer.length,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Erro na convers√£o:', error);

        return createResponse(500, {
            error: 'Erro interno do servidor',
            message: error.message,
            requestId: context.awsRequestId
        });
    }
};

/**
 * Normaliza a URL adicionando protocolo se necess√°rio
 */
function normalizeUrl(url) {
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
        return `https://${url}`;
    }
    return url;
}

/**
 * Consulta Amazon Q CLI para obter insights sobre a convers√£o
 */
async function consultAmazonQ(url) {
    console.log('ü§ñ Consultando Amazon Q CLI...');

    try {
        const prompt = `
        Preciso converter o site ${url} para PDF de forma otimizada.

        Analise e forne√ßa recomenda√ß√µes sobre:
        1. Configura√ß√µes ideais de p√°gina (tamanho, orienta√ß√£o, margens)
        2. Estrat√©gias para capturar conte√∫do din√¢mico
        3. Otimiza√ß√µes de performance
        4. Tratamento de elementos espec√≠ficos (imagens, tabelas, gr√°ficos)
        5. Poss√≠veis desafios t√©cnicos

        Responda em formato JSON com as seguintes chaves:
        - pageConfig: {size, orientation, margins}
        - captureStrategy: {waitTime, javascript, images}
        - optimizations: [lista de otimiza√ß√µes]
        - challenges: [poss√≠veis desafios]
        `;

        const qResponse = await executeQCommand(prompt);

        return {
            raw: qResponse,
            summary: extractInsights(qResponse),
            recommendations: extractRecommendations(qResponse)
        };

    } catch (error) {
        console.warn('‚ö†Ô∏è Amazon Q n√£o dispon√≠vel, usando configura√ß√µes padr√£o:', error.message);

        return {
            raw: 'Amazon Q n√£o dispon√≠vel',
            summary: 'Usando configura√ß√µes padr√£o',
            recommendations: getDefaultRecommendations()
        };
    }
}

/**
 * Executa comando Amazon Q CLI
 */
async function executeQCommand(prompt) {
    return new Promise((resolve, reject) => {
        const qProcess = spawn('aws', ['q', 'ask', prompt], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        let output = '';
        let errorOutput = '';

        qProcess.stdout.on('data', (data) => {
            output += data.toString();
        });

        qProcess.stderr.on('data', (data) => {
            errorOutput += data.toString();
        });

        qProcess.on('close', (code) => {
            if (code === 0) {
                resolve(output.trim());
            } else {
                reject(new Error(`Amazon Q CLI falhou: ${errorOutput}`));
            }
        });

        // Timeout de 30 segundos
        setTimeout(() => {
            qProcess.kill();
            reject(new Error('Timeout na consulta ao Amazon Q'));
        }, 30000);
    });
}

/**
 * Extrai insights da resposta do Amazon Q
 */
function extractInsights(qResponse) {
    try {
        // Tentar extrair JSON da resposta
        const jsonMatch = qResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            return JSON.parse(jsonMatch[0]);
        }

        // Se n√£o encontrar JSON, extrair informa√ß√µes por padr√µes
        return {
            pageConfig: extractPageConfig(qResponse),
            captureStrategy: extractCaptureStrategy(qResponse),
            summary: qResponse.substring(0, 200) + '...'
        };

    } catch (error) {
        console.warn('Erro ao extrair insights:', error.message);
        return {
            summary: 'Resposta do Amazon Q processada com configura√ß√µes padr√£o'
        };
    }
}

/**
 * Extrai configura√ß√µes de p√°gina da resposta do Q
 */
function extractPageConfig(response) {
    const config = {
        format: 'A4',
        orientation: 'portrait',
        margin: '1cm'
    };

    if (response.toLowerCase().includes('landscape') || response.toLowerCase().includes('horizontal')) {
        config.orientation = 'landscape';
    }

    if (response.toLowerCase().includes('letter')) {
        config.format = 'Letter';
    }

    return config;
}

/**
 * Extrai estrat√©gia de captura da resposta do Q
 */
function extractCaptureStrategy(response) {
    return {
        waitTime: response.toLowerCase().includes('dynamic') ? 3000 : 1000,
        javascript: !response.toLowerCase().includes('disable javascript'),
        images: !response.toLowerCase().includes('no images'),
        fullPage: true
    };
}

/**
 * Extrai recomenda√ß√µes estruturadas
 */
function extractRecommendations(qResponse) {
    const recommendations = getDefaultRecommendations();

    try {
        const response = qResponse.toLowerCase();

        // Analisar recomenda√ß√µes de formato
        if (response.includes('landscape')) {
            recommendations.pageConfig.orientation = 'landscape';
        }

        if (response.includes('a3') || response.includes('large')) {
            recommendations.pageConfig.format = 'A3';
        }

        // Analisar estrat√©gias de captura
        if (response.includes('javascript') || response.includes('dynamic')) {
            recommendations.captureStrategy.javascript = true;
            recommendations.captureStrategy.waitTime = 5000;
        }

        if (response.includes('high quality') || response.includes('print quality')) {
            recommendations.optimizations.push('high-quality-rendering');
        }

    } catch (error) {
        console.warn('Erro ao extrair recomenda√ß√µes:', error.message);
    }

    return recommendations;
}

/**
 * Configura√ß√µes padr√£o quando Amazon Q n√£o est√° dispon√≠vel
 */
function getDefaultRecommendations() {
    return {
        pageConfig: {
            format: 'A4',
            orientation: 'portrait',
            margin: '1cm'
        },
        captureStrategy: {
            waitTime: 2000,
            javascript: true,
            images: true,
            fullPage: true
        },
        optimizations: [
            'compress-images',
            'optimize-fonts',
            'remove-unnecessary-elements'
        ]
    };
}

/**
 * Gera PDF usando Puppeteer com base nos insights do Amazon Q
 */
async function generatePdfWithInsights(url, qInsights) {
    console.log('üìÑ Gerando PDF com Puppeteer...');

    const recommendations = qInsights.recommendations;

    const browser = await puppeteer.launch({
        executablePath: chromium.path,
        headless: 'new',
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--single-process'
        ]
    });

    try {
        const page = await browser.newPage();

        // Configurar viewport baseado nas recomenda√ß√µes
        const isLandscape = recommendations.pageConfig.orientation === 'landscape';
        await page.setViewport({
            width: isLandscape ? 1920 : 1080,
            height: isLandscape ? 1080 : 1920,
            deviceScaleFactor: 2
        });

        // Navegar para a p√°gina
        console.log(`üåê Navegando para: ${url}`);
        await page.goto(url, {
            waitUntil: 'networkidle2',
            timeout: 30000
        });

        // Aguardar tempo recomendado pelo Amazon Q
        const waitTime = recommendations.captureStrategy.waitTime || 2000;
        console.log(`‚è≥ Aguardando ${waitTime}ms para carregamento completo...`);
        await page.waitForTimeout(waitTime);

        // Configura√ß√µes do PDF baseadas nas recomenda√ß√µes do Q
        const pdfOptions = {
            format: recommendations.pageConfig.format || 'A4',
            landscape: recommendations.pageConfig.orientation === 'landscape',
            margin: {
                top: recommendations.pageConfig.margin || '1cm',
                bottom: recommendations.pageConfig.margin || '1cm',
                left: recommendations.pageConfig.margin || '1cm',
                right: recommendations.pageConfig.margin || '1cm'
            },
            printBackground: true,
            preferCSSPageSize: false
        };

        console.log('‚öôÔ∏è Configura√ß√µes do PDF:', pdfOptions);

        // Gerar PDF
        const pdfBuffer = await page.pdf(pdfOptions);

        console.log(`‚úÖ PDF gerado com sucesso! Tamanho: ${pdfBuffer.length} bytes`);

        return pdfBuffer;

    } finally {
        await browser.close();
    }
}

/**
 * Cria resposta HTTP padronizada
 */
function createResponse(statusCode, body) {
    return {
        statusCode,
        headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
            'Access-Control-Allow-Methods': 'POST,OPTIONS'
        },
        body: JSON.stringify(body, null, 2)
    };
}
